{
    "parser": "babel-eslint",                               // Use babel parser, which provides all ES6 functionality
    "env": {
        "node": true,
        "mocha": true,
        "browser": true,
        "es6": true
    },
    "ecmaFeatures": {
        "jsx": true
    },
    "settings": {
        "ecmascript": 6,
        "jsx": true
    },
    "plugins": [
        "react"
    ],
    "globals": {},
    "rules": {

        //// Possible Errors ////

        "no-cond-assign": 2,                                // Disallow variable assignment in conditionals
        "no-constant-condition": 2,                         // Disallow use of constant expressions in conditionals
        "no-control-regex": 2,                              // Disallow control characters in regexs
        "no-debugger": 2,                                   // Disallow debugger
        "no-dupe-args": 2,                                  // Disallow duplicate params in function declarations
        "no-dupe-keys": 2,                                  // Disallow duplicate keys in object literals
        "no-duplicate-case": 2,                             // Disallow duplicate case labels in switch statements
        "no-empty-character-class": 2,                      // Disallow empty character class in regex
        "no-empty": 2,                                      // Disallow empty block statements
        "no-ex-assign": 2,                                  // Disallow assignment of the exception parameter
        "no-extra-boolean-cast": 2,                         // Disallow extra boolean casts in conditionals (e.g. if (!!bar) {)
        "no-extra-semi": 2,                                 // Disallow extra semi-colons
        "no-func-assign": 2,                                // Disallow reassignment of function declaration
        "no-invalid-regexp": 2,                             // Disallow invalid regex
        "no-irregular-whitespace": 2,                       // Disallow non-space/tab whitespace
        "no-negated-in-lhs": 2,                             // Disallow negated left operand of in operator
        "no-obj-calls": 2,                                  // Disallow global object function calls (e.g. JSON() or Math())
        "no-regex-spaces": 2,                               // Disallow multiple plain spaces in regexes
        "no-sparse-arrays": 2,                              // Disallow empty slots in arrays (e.g. [1,,2])
        "no-unreachable": 2,                                // Disallow code that has no ability to be executed
        "use-isnan": 2,                                     // Disallow comparison against NaN without isNan()
        "valid-jsdoc": [2, {                                // Ensure JSDoc comments are syntactically correct
            "prefer": {
                "return": "returns",                        // Prefer @returns to @return
            },
            "requireReturn": false                          // Do not require a description for @returns
        }],
        "valid-typeof": 2,                                  // Validates string comparison of typeof for errors
        "no-unexpected-multiline": 2,                       // Disallow multi-line expressions without semi-colons

        //// Best Practices ////

        "accessor-pairs": 2,                                // Enforce corresponding getters and setters in objects
        "block-scoped-var": 2,                              // Disallow var reference outside of scope
        "consistent-return": 2,                             // Ensure that the type of returns is consistent (i.e. boolean, object, etc)
        "curly": 2,                                         // Always require curly braces
        "default-case": 2,                                  // Require default case in switch statements
        "dot-notation": [2, {                               // Require dot notation to access properties where appropriate
            "allowPattern": "^[a-z]+(_[a-z]+)+$"            // Allow underscores when interacting with external API
        }],
        "eqeqeq": 2,                                        // Enforce safe comparisons with === and !==
        "guard-for-in": 2,                                  // Require for in on non-prototype inherited properties
        "no-alert": 2,                                      // Disallow alert(), confirm(), prompt()
        "no-caller": 2,                                     // Disallow arguments.caller and arguments.callee as they have been depreciated
        "no-div-regex": 2,                                  // Disallow regexes that look like division
        "no-else-return": 2,                                // Disallow else statements with return if not needed
        "no-eq-null": 2,                                    // Disallow unsafe comparison with null (e.g. if (foo == null) )
        "no-eval": 2,                                       // Disallow the use of eval()
        "no-extend-native": 2,                              // Disallow extending native objects
        "no-extra-bind": 2,                                 // Warn when .bind() used and this not referenced or not needed
        "no-fallthrough": 2,                                // Enforce commenting of switch case fallthroughs
        "no-floating-decimal": 2,                           // Warn when decimals are unbalanced (e.g. 2. or .8 should be 2.0 or 0.8)
        "no-implicit-coercion": 2,                          // Warn for fancy coercions that can be hard to read
        "no-implied-eval": 2,                               // Disallow passing strings to setInterval and setTimeout
        "no-invalid-this": 2,                               // Disallow using this outside of context
        "no-iterator": 2,                                   // Disallow obsolete use of __iterator__
        "no-labels": 2,                                     // Disallow using labels in switch statements
        "no-loop-func": 2,                                  // Disallow function declarations in loops
        "no-multi-spaces": 2,                               // Disallow multiple unnecessary spaces
        "no-native-reassign": 2,                            // Disallow reassignment of native objects
        "no-new-func": 2,                                   // Disallow Function declaration using new
        "no-new-wrappers": 2,                               // Disallow new with String, Number, Boolean
        "no-new": 2,                                        // Disallow using new without assignment
        "no-octal-escape": 2,                               // Octal escape characters have been depreciated in favor of their unicode counterparts
        "no-octal": 2,                                      // Disallow octal literals
        "no-param-reassign": 2,                             // Disallow reassignment of function parameters
        "no-process-env": 2,                                // Disallow using process.env in node environments in favor of using config files
        "no-proto": 2,                                      // Disallow use of depreciated __proto__
        "no-redeclare": [2, {                               // Disallow redeclaration of existing variables and global variables
            "builtinGlobals": true
        }],
        "no-return-assign": 2,                              // Disallow the use of assignments in return statements
        "no-script-url": 2,                                 // Disallow the use of javascript: in URLs (considered by some to be a form of eval)
        "no-self-compare": 2,                               // Disallow comparisons with self, if (x === x)
        "no-sequences": 2,                                  // Disallow including multiple expressions using a comma when only one is expected
        "no-throw-literal": 2,                              // Disallow throwing of anything other than Error objects (for the most part)
        "no-unused-expressions": [2, {                      // Disallow expressions without assignment or execution, but allow in certain cases
            "allowShortCircuit": true,
            "allowTernary": true
        }],
        "no-useless-call": 2,                               // Disallow calling call() and apply() when normal invocation will suffice
        "no-useless-concat": 2,                             // Disallow concatenation of two strings when not needed (var foo = "a" + "b")
        "no-void": 2,                                       // Disallow the use of void operator as it can lead to confusion
        "no-with": 2,                                       // Disallow with statements, which are not allowed in strict mode
        "radix": 2,                                         // Force parseInt() functions to include the second argument (radix) to prevent incorrect interpretation
    //"vars-on-top": 2,                                     // Require all variables to be declared at the top of a function scope to prevent unexpected hoisting
        "wrap-iife": [2, "inside"],                         // Require parentheses for all immediately invoked function expressions (This may be up for debate)
        "yoda": 2,                                          // Disallow Yoda conditions where the literal is on the left side of an expression (e.g. if ("red" === color))

        //// Strict Mode ////

        "no-delete-var": 2,                                 // Disallow deletion of variables as only object properties can be deleted
        "no-shadow-restricted-names": 2,                    // Disallow overwriting global object properties
        "no-shadow": 2,                                     // Disallow a variable from sharing the same name as a variable in its containing scope
        "no-undef-init": 2,                                 // Disallow explicit variable definition to undefined
        "no-undef": 2,                                      // Disallow undefined variables unless declared in a global comment
        "no-unused-vars": 2,                                // Disallow declaring variables that are never used
        "no-use-before-define": [2, "nofunc"],              // Disallow variable declaration before use (this will be standard in ES6)

        //// Node.js/CommonJS ////

        "callback-return": 2,                               // Require return with callback when multiple callbacks included in a function
        "global-require": 2,                                // Require require() statements to be at the top-level of module scope
        "handle-callback-err": [2, "^(err|error)$"],        // Require error handling in callbacks using the "err or error" argument
        "no-mixed-requires": 1,                             // Warn if require() variables are declared with other non-require() variables
        "no-new-require": 2,                                // Disallow using the new keyword with require() function
        "no-path-concat": 2,                                // Disallow string concatenation using __dirname or __filename as using path.join() and path.resolve() are safer across systems
        "no-process-exit": 2,                               // Disallow the use of process.exit() as throw new Error("Message") allows other parts of the application to handle the error
        "no-sync": 1,                                       // Warn when using synchronous versions of modules where an asynchronous version exists

        //// Stylistic Issues ////

        "array-bracket-spacing": [2, "never"],              // Enforce no spaces at bookends of array/object definitions (e.g. [2, 3] is valid, [ 2, 3 ] is invalid)
        "block-spacing": 2,                                 // Enforce spaces in single line blocks (e.g. function() { return true; } is valid, function() {return true;} is invalid)
        "brace-style": [2, "1tbs", {                        // Enforce consistent brace style
            "allowSingleLine": true
        }],
        "camelcase": [2, { "properties": "always" }],       // Enforce camelcase in all variable and function declarations (does not include leading or trailing _ or CAMEL_CASE)
        "comma-spacing": [2, {                              // Enforce spaces after commas
            "before": false,
            "after": true
        }],
        "comma-style": [2, "last"],                         // Enforce commas at the end of a line
        "computed-property-spacing": [2, "never"],          // Disallow spaces inside of computed properties
        "consistent-this": [2, "that"],                     // Enforce capturing the current execution context using the that variable (e.g var that = this;) - consider changing to self
        "eol-last": 2,                                      // Enforce trailing space at the end of every non-empty file
        "func-names": 2,                                    // Enforce naming of optionally named functions (that could remain anonymous). This helps with debugging, but open to turning this off
        // "func-style": [2, "declaration"],                    // Need to discuss with team
        "id-length": [2, {                                  // Enforce a mininmum id length of 2 characters, except i for iterating over loops
            "exceptions": ["i", "_"]
        }],
        "indent": [2, 2],                               // Enforce tabs equivalent to two spaces
        "jsx-quotes": [2, "prefer-double"],                 // Enforce double quotes for JSX attribute values unless a set of single quotes contains a double quote
        "key-spacing": [2, {                                // Enforce one space after key in object
            "beforeColon": false,
            "afterColon": true
        }],
        "linebreak-style": [2, "unix"],                     // Enforce unix-style line endings
        "lines-around-comment": [2, {                       // Enforce spaces before comment blocks and allow comments at the beginning of array and object declarations
            "beforeBlockComment": true,
            "allowObjectStart": true,
            "allowArrayStart": true
        }],
        // "max-depth": [2, 5],                             // Enforces maximum nesting level, need to check with team if we want to enforce this
        "max-len": [2, 100, 2],                             // Enforce a maximum line length of 100 characters, while treating tabs as 2 characters
        "max-nested-callbacks": 2,                          // Enforce a maximum of 10 levels of nested callbacks
        "max-params": [2, 5],                               // Enforce a maximum of 5 arguments a function can accept
        // "max-statements": [2, 10],                       // Enforce a maximum of 10 statements in any given function. Need to discuss with team
        "new-cap": 2,                                       // Require a capital letter to instantiate a constructor
        "new-parens": 2,                                    // Require parentheses when instantiating a constructor
        "newline-after-var": 2,                             // Require a blank line after variable definitions
        "no-array-constructor": 2,                          // Disallow using the Array constructor to create arrays
        "no-bitwise": 2,                                    // Disallow bitwise opearators (e.g. var x = y & z)
        "no-continue": 2,                                   // Disallow the use of continue statements
        "no-lonely-if": 2,                                  // Disallow a singular if statement inside of an else block in favor of using an else if statement
        "no-mixed-spaces-and-tabs": [2, "smart-tabs"],      // Disallow mixing of tabs and spaces, except for the purpose of alignment
        "no-multiple-empty-lines": [2, {                    // Disallow more than two blank lines in a row, and only allow 1 at the end of a file
            "max": 2,
            "maxEOF": 1
        }],
        "no-negated-condition": 2,                          // Disallow using negated conditions when the else branch is not empty
        "no-nested-ternary": 2,                             // Disallow nested ternary expressions
        "no-new-object": 2,                                 // Disallow using the new Object constructor in favor of the object literal syntax var myObject = {};
        "no-plusplus": [2, {                                // Disallow the use of unary operators, ++ and -- unless they are used as iterators for a for loop
            "allowForLoopAfterthoughts": true
        }],
        "no-spaced-func": 2,                                // Disallow spaces between function name and parentheses (e.g function ())
        //"no-ternary": 2,                                  // Disallow the use of ternary operators. Need to discuss with team
        "no-trailing-spaces": 2,                            // Disallow trailing whitespace on lines
        "no-unneeded-ternary": [2, {                        // Disallow use of ternary assignment for variables
            "defaultAssignment": false
        }],
        "object-curly-spacing": [2, "never"],               // Disallow extra spaces inside objects
        //"one-var": [2, {                                  // Require all constants to be declared at the top of the function scope. Need to discuss with team
        //  "var: "always",
        //  "let": "always",
        //  "const": "never"
        //}],
        // "padded-blocks": [2, "always"]                   // Require blank lines at the beginning and end of function definitions. Need to discuss with team
        "quote-props": [2, "as-needed"],                    // Require quoting of object keys when necessary (e.g. var object = { "foo-bar": 5, bar: 2, foo: function() {}})
        "quotes": [2, "single", "avoid-escape"],            // Require use of double quotes for string literals, unless they would require escaping (e.g. var string = 'The woman said "Hi!"';)
        "require-jsdoc": [2, {                              // Require JSDoc comments for all functions
            "require": {
                "FunctionDeclaration": false,
                "MethodDefinition": false,
                "ClassDeclaration": false
            }
        }],
        "semi-spacing": 2,                                  // Require space after semicolon, prevent space before semicolon
        "semi": [2, "always"],                              // Require semicolons after each new line
        "space-after-keywords": 2,                          // Require spaces after keywords (e.g. if, else, while, for, etc)
        "space-before-blocks": 2,                           // Require space before blocks (e.g. if (a) {})
        "space-before-function-paren": [2, "never"],        // Disallow space before opening paren in function definitions
        "space-before-keywords": 2,                         // Disallow space before keywords (if, else, while, for, do, switch, try, catch, function, etc)
        "space-in-parens": 2,                               // Disallow spaces in parens
        "space-infix-ops": 2,                               // Require space around infix operators (e.g. var foo = 1 + 2, not var foo = 1+2)
        "space-return-throw-case": 2,                       // Require space after return, throw, and case
        "space-unary-ops": 2,                               // Require spaces around unary words like void, new, delete, disallow around nonwords like ++, --, !
        "spaced-comment": [2, "always"],                    // Require spaces in comments (e.g. // This is a comment, not //This is a comment)
        "wrap-regex": 2,                                    // Wrap regex in parens to make it clearer

        //// ECMAScript 6 ////

        "arrow-body-style": [2, "as-needed"],               // Require braces around arrow body when required
        "arrow-parens": [2, "always"],                      // Require parens around arrow-functions
        "arrow-spacing": 2,                                 // Require spaces before and after arrow-function declarations
        "constructor-super": 2,                             // Require super when necessary, warn when it is used inproperly
        "generator-star-spacing": 2,                        // Enforce space before generator *, no space after (e.g. function *generator() {})
        "no-arrow-condition": 2,                            // Disallow arrow functions where a condition is expected
        "no-class-assign": 2,                               // Disallow modifying variables named as class declarations
        "no-const-assign": 2,                               // Disallow modifying variables declared as constants
        "no-dupe-class-members": 2,                         // Disallow duplicate named class members
        "no-this-before-super": 2,                          // Disallow referencing this or super before super() call
        //"no-var": 2,                                      // Disallow use of var in favor of let and const. Need to discuss with team.
        //"object-shorthand": 2,                            // Require object literal shorthand definition. Need to discuss with team.
        //"prefer-arrow-callback": 2,                       // Require use of arrow function notation in callbacks where appropriate. Need to discuss with team. Probably a good idea, but only in ES6 environments.
        //"prefer-const": 2,                                // Require use of const when let or var assigned and never modified. Need to discuss with team. Probably a good idea, but only in ES6 environments.
        //"prefer-reflect": 2,                              // Require use of Reflect API where it can be used to replace older object methods. Needs configuration and need to discuss with team. Only applicable in ES6 environments
        //"prefer-spread": 2,                               // Require the use of the spread operator instead of using Function.prototype.apply() function. Need to discuss with team. Probably a good idea, but only in ES6 environments.
        //"prefer-template": 2,                             // Require use of template literals over string concatenation (e.g. var str = `Hello ${world}!`; rather than var str = "Hello " + world;). Need to discuss with team. Probably a good idea, but only in ES6 environments.
        //"require-yield": 2,                               // Require the use of yield expression in generator functions (without yield there is no reason to use a generator). Need to discuss with team. Probably a good idea, but only in ES6 environments
    }
}
